[
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "sqladmin",
        "description": "sqladmin",
        "isExtraImport": true,
        "detail": "sqladmin",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "sqladmin",
        "description": "sqladmin",
        "isExtraImport": true,
        "detail": "sqladmin",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "sqladmin",
        "description": "sqladmin",
        "isExtraImport": true,
        "detail": "sqladmin",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "sqladmin",
        "description": "sqladmin",
        "isExtraImport": true,
        "detail": "sqladmin",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "sqladmin",
        "description": "sqladmin",
        "isExtraImport": true,
        "detail": "sqladmin",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "sqladmin",
        "description": "sqladmin",
        "isExtraImport": true,
        "detail": "sqladmin",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "sqladmin",
        "description": "sqladmin",
        "isExtraImport": true,
        "detail": "sqladmin",
        "documentation": {}
    },
    {
        "label": "Love",
        "importPath": "love.models.love_model",
        "description": "love.models.love_model",
        "isExtraImport": true,
        "detail": "love.models.love_model",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "order.models.order_model",
        "description": "order.models.order_model",
        "isExtraImport": true,
        "detail": "order.models.order_model",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product.models.product_model",
        "description": "product.models.product_model",
        "isExtraImport": true,
        "detail": "product.models.product_model",
        "documentation": {}
    },
    {
        "label": "ProductMedia",
        "importPath": "product.models.product_media_model",
        "description": "product.models.product_media_model",
        "isExtraImport": true,
        "detail": "product.models.product_media_model",
        "documentation": {}
    },
    {
        "label": "upload_image",
        "importPath": "service.firebase_util",
        "description": "service.firebase_util",
        "isExtraImport": true,
        "detail": "service.firebase_util",
        "documentation": {}
    },
    {
        "label": "wtforms",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wtforms",
        "description": "wtforms",
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "FileField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "tag.models.tag_model",
        "description": "tag.models.tag_model",
        "isExtraImport": true,
        "detail": "tag.models.tag_model",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "starlette.requests",
        "description": "starlette.requests",
        "isExtraImport": true,
        "detail": "starlette.requests",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "auth.utils",
        "description": "auth.utils",
        "isExtraImport": true,
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "importPath": "auth.utils",
        "description": "auth.utils",
        "isExtraImport": true,
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "auth.utils",
        "description": "auth.utils",
        "isExtraImport": true,
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "decode_and_verify_access_token",
        "importPath": "auth.utils",
        "description": "auth.utils",
        "isExtraImport": true,
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "decode_and_verify_refresh_token",
        "importPath": "auth.utils",
        "description": "auth.utils",
        "isExtraImport": true,
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "auth.utils",
        "description": "auth.utils",
        "isExtraImport": true,
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "AuthenticationBackend",
        "importPath": "sqladmin.authentication",
        "description": "sqladmin.authentication",
        "isExtraImport": true,
        "detail": "sqladmin.authentication",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "sqladmin.authentication",
        "description": "sqladmin.authentication",
        "isExtraImport": true,
        "detail": "sqladmin.authentication",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "URLPath",
        "importPath": "starlette.routing",
        "description": "starlette.routing",
        "isExtraImport": true,
        "detail": "starlette.routing",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "mailjet_rest",
        "description": "mailjet_rest",
        "isExtraImport": true,
        "detail": "mailjet_rest",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "firebase_admin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "credentials",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "mimetypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mimetypes",
        "description": "mimetypes",
        "detail": "mimetypes",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "starlette.exceptions",
        "description": "starlette.exceptions",
        "isExtraImport": true,
        "detail": "starlette.exceptions",
        "documentation": {}
    },
    {
        "label": "ExceptionMiddleware",
        "importPath": "starlette.middleware.exceptions",
        "description": "starlette.middleware.exceptions",
        "isExtraImport": true,
        "detail": "starlette.middleware.exceptions",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "requires",
        "importPath": "starlette.authentication",
        "description": "starlette.authentication",
        "isExtraImport": true,
        "detail": "starlette.authentication",
        "documentation": {}
    },
    {
        "label": "Middleware",
        "importPath": "fastapi.middleware",
        "description": "fastapi.middleware",
        "isExtraImport": true,
        "detail": "fastapi.middleware",
        "documentation": {}
    },
    {
        "label": "AdminAuth",
        "importPath": "admin.auth_backend",
        "description": "admin.auth_backend",
        "isExtraImport": true,
        "detail": "admin.auth_backend",
        "documentation": {}
    },
    {
        "label": "AdminBackend",
        "importPath": "admin.admin_backend",
        "description": "admin.admin_backend",
        "isExtraImport": true,
        "detail": "admin.admin_backend",
        "documentation": {}
    },
    {
        "label": "TagAdmin",
        "importPath": "admin.models.tag_admin_model",
        "description": "admin.models.tag_admin_model",
        "isExtraImport": true,
        "detail": "admin.models.tag_admin_model",
        "documentation": {}
    },
    {
        "label": "ProductAdmin",
        "importPath": "admin.models.product_admin_model",
        "description": "admin.models.product_admin_model",
        "isExtraImport": true,
        "detail": "admin.models.product_admin_model",
        "documentation": {}
    },
    {
        "label": "LoveAdmin",
        "importPath": "admin.models.love_admin_model",
        "description": "admin.models.love_admin_model",
        "isExtraImport": true,
        "detail": "admin.models.love_admin_model",
        "documentation": {}
    },
    {
        "label": "ProductMediaAdmin",
        "importPath": "admin.models.product_media_admin_model",
        "description": "admin.models.product_media_admin_model",
        "isExtraImport": true,
        "detail": "admin.models.product_media_admin_model",
        "documentation": {}
    },
    {
        "label": "OrderAdmin",
        "importPath": "admin.models.order_admin_model",
        "description": "admin.models.order_admin_model",
        "isExtraImport": true,
        "detail": "admin.models.order_admin_model",
        "documentation": {}
    },
    {
        "label": "LoveAdmin",
        "kind": 6,
        "importPath": "admin.models.love_admin_model",
        "description": "admin.models.love_admin_model",
        "peekOfCode": "class LoveAdmin(ModelView, model=Love):\n    name = \"Love\"\n    icon = \"fa-solid fa-thumbs-up\"\n    page_size_options = [25, 50, 100, 200]\n    category = \"LOVE\"\n    can_edit = True\n    can_delete = True\n    can_view_details = True\n    column_list = [Love.id, Love.product, Love.user_id, Love.created_at]\n    form_excluded_columns = [Love.created_at]",
        "detail": "admin.models.love_admin_model",
        "documentation": {}
    },
    {
        "label": "OrderAdmin",
        "kind": 6,
        "importPath": "admin.models.order_admin_model",
        "description": "admin.models.order_admin_model",
        "peekOfCode": "class OrderAdmin(ModelView, model=Order):\n    name = \"Order\"\n    icon = \"fa-solid fa-money-bills\"\n    page_size_options = [25, 50, 100, 200]\n    category = \"ORDER\"\n    can_edit = True\n    can_delete = True\n    can_view_details = True\n    column_list = [Order.id, Order.product,\n                   Order.user_id, Order.status, Order.created_at]",
        "detail": "admin.models.order_admin_model",
        "documentation": {}
    },
    {
        "label": "ProductAdmin",
        "kind": 6,
        "importPath": "admin.models.product_admin_model",
        "description": "admin.models.product_admin_model",
        "peekOfCode": "class ProductAdmin(ModelView, model=Product):\n    name = \"Product\"\n    icon = \"fa-solid fa-shirt\"\n    page_size_options = [25, 50, 100, 200]\n    category = \"PRODUCT\"\n    can_create = True\n    can_edit = True\n    can_delete = True\n    can_view_details = True\n    can_export = False",
        "detail": "admin.models.product_admin_model",
        "documentation": {}
    },
    {
        "label": "ProductMediaAdmin",
        "kind": 6,
        "importPath": "admin.models.product_media_admin_model",
        "description": "admin.models.product_media_admin_model",
        "peekOfCode": "class ProductMediaAdmin(ModelView, model=ProductMedia):\n    name = \"Product Media\"\n    icon = \"fa-solid fa-photo-film\"\n    page_size_options = [25, 50, 100, 200]\n    category = \"PRODUCT\"\n    can_create = True\n    can_edit = True\n    can_delete = True\n    can_view_details = True\n    can_export = False",
        "detail": "admin.models.product_media_admin_model",
        "documentation": {}
    },
    {
        "label": "TagAdmin",
        "kind": 6,
        "importPath": "admin.models.tag_admin_model",
        "description": "admin.models.tag_admin_model",
        "peekOfCode": "class TagAdmin(ModelView, model=Tag):\n    name = \"Tag\"\n    icon = \"fa-solid fa-tags\"\n    page_size_options = [25, 50, 100, 200]\n    category = \"PRODUCT\"\n    can_create = True\n    can_edit = True\n    can_delete = True\n    can_view_details = True\n    can_export = False",
        "detail": "admin.models.tag_admin_model",
        "documentation": {}
    },
    {
        "label": "AdminBackend",
        "kind": 6,
        "importPath": "admin.admin_backend",
        "description": "admin.admin_backend",
        "peekOfCode": "class AdminBackend(Admin):\n    async def login(self, request: Request) -> Response:\n        assert self.authentication_backend is not None\n        context = {\"request\": request, \"error\": \"\"}\n        cookies = request.cookies\n        refresh_token = cookies.get(\"refresh_token\")\n        if refresh_token is not None:\n            return RedirectResponse(request.url_for(\"admin:index\"), status_code=302)\n        if request.method == \"GET\":\n            return self.templates.TemplateResponse(\"login.html\", context)",
        "detail": "admin.admin_backend",
        "documentation": {}
    },
    {
        "label": "AdminAuth",
        "kind": 6,
        "importPath": "admin.auth_backend",
        "description": "admin.auth_backend",
        "peekOfCode": "class AdminAuth(AuthenticationBackend):\n    async def login(self, request: Request) -> bool:\n        form = await request.form()\n        username, password = form[\"username\"], form[\"password\"]\n        if not username or not password:\n            return False\n        if username == \"admin\" and password == \"admin\":\n            return True\n        return False\n    async def authenticate(self, request: Request) -> Optional[RedirectResponse]:",
        "detail": "admin.auth_backend",
        "documentation": {}
    },
    {
        "label": "AuthMiddleware",
        "kind": 6,
        "importPath": "auth.middlewares.auth_middleware",
        "description": "auth.middlewares.auth_middleware",
        "peekOfCode": "class AuthMiddleware:\n    def __init__(self, app):\n        self.app = app\n    async def __call__(self, scope, receive, send):\n        request = Request(scope, receive=receive)\n        try:\n            authorization = request.headers.get(\"Authorization\")\n            if authorization:\n                if authorization.lower().startswith(\"bearer\"):\n                    token = authorization.split(\" \")[1]",
        "detail": "auth.middlewares.auth_middleware",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "kind": 6,
        "importPath": "auth.middlewares.jwt_bearer",
        "description": "auth.middlewares.jwt_bearer",
        "peekOfCode": "class JWTBearer(HTTPBearer):\n    def __init__(self, auto_error: bool = True):\n        super().__init__(auto_error=auto_error)\n    async def __call__(self, request: Request):\n        credentials: HTTPAuthorizationCredentials = await super().__call__(request)\n        if credentials:\n            if not credentials.scheme == \"Bearer\":\n                raise HTTPException(\n                    status_code=403, detail=\"Invalid authentication scheme\"\n                )",
        "detail": "auth.middlewares.jwt_bearer",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "def create_access_token(\n    username: str = None,\n    user_id: int = None,\n    expires_delta: timedelta = None,\n) -> str:\n    if expires_delta is not None:\n        expires_delta = datetime.utcnow() + expires_delta\n    else:\n        expires_delta = datetime.utcnow() + timedelta(\n            minutes=ACCESS_TOKEN_EXPIRE_MINUTES",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "def create_refresh_token(\n    username: str = None,\n    user_id: int = None,\n    expires_delta: timedelta = None,\n) -> str:\n    if expires_delta is not None:\n        expires_delta = datetime.utcnow() + expires_delta\n    else:\n        expires_delta = datetime.utcnow() + timedelta(\n            minutes=REFRESH_TOKEN_EXPIRE_MINUTES",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "decode_and_verify_access_token",
        "kind": 2,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "def decode_and_verify_access_token(token):\n    try:\n        decoded_token = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n        )\n        return decoded_token\n    except ExpiredSignatureError:\n        return None",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "decode_and_verify_refresh_token",
        "kind": 2,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "def decode_and_verify_refresh_token(token):\n    try:\n        decoded_token = jwt.decode(\n            token,\n            settings.JWT_REFRESH_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n        )\n        return decoded_token\n    except ExpiredSignatureError:\n        return None",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "get_hashed_password",
        "kind": 2,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "def get_hashed_password(password: str):\n    return password_context.hash(password)\ndef verify_password(password: str, hashed_pass: str):\n    return password_context.verify(password, hashed_pass)\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "def verify_password(password: str, hashed_pass: str):\n    return password_context.verify(password, hashed_pass)\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "generate_password",
        "kind": 2,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "def generate_password(length):\n    characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "api_key = settings.MJ_APIKEY_PUBLIC\napi_secret = settings.MJ_APIKEY_PRIVATE\nmailjet = Client(auth=(api_key, api_secret), version=\"v3.1\")\nACCESS_TOKEN_EXPIRE_MINUTES = 30\nREFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 7\npassword_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef create_access_token(\n    username: str = None,\n    user_id: int = None,\n    expires_delta: timedelta = None,",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "api_secret",
        "kind": 5,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "api_secret = settings.MJ_APIKEY_PRIVATE\nmailjet = Client(auth=(api_key, api_secret), version=\"v3.1\")\nACCESS_TOKEN_EXPIRE_MINUTES = 30\nREFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 7\npassword_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef create_access_token(\n    username: str = None,\n    user_id: int = None,\n    expires_delta: timedelta = None,\n) -> str:",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "mailjet",
        "kind": 5,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "mailjet = Client(auth=(api_key, api_secret), version=\"v3.1\")\nACCESS_TOKEN_EXPIRE_MINUTES = 30\nREFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 7\npassword_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef create_access_token(\n    username: str = None,\n    user_id: int = None,\n    expires_delta: timedelta = None,\n) -> str:\n    if expires_delta is not None:",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30\nREFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 7\npassword_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef create_access_token(\n    username: str = None,\n    user_id: int = None,\n    expires_delta: timedelta = None,\n) -> str:\n    if expires_delta is not None:\n        expires_delta = datetime.utcnow() + expires_delta",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "REFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 7\npassword_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef create_access_token(\n    username: str = None,\n    user_id: int = None,\n    expires_delta: timedelta = None,\n) -> str:\n    if expires_delta is not None:\n        expires_delta = datetime.utcnow() + expires_delta\n    else:",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "password_context",
        "kind": 5,
        "importPath": "auth.utils",
        "description": "auth.utils",
        "peekOfCode": "password_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef create_access_token(\n    username: str = None,\n    user_id: int = None,\n    expires_delta: timedelta = None,\n) -> str:\n    if expires_delta is not None:\n        expires_delta = datetime.utcnow() + expires_delta\n    else:\n        expires_delta = datetime.utcnow() + timedelta(",
        "detail": "auth.utils",
        "documentation": {}
    },
    {
        "label": "firestore_adminCallTransformer",
        "kind": 6,
        "importPath": "env.bin.fixup_firestore_admin_v1_keywords",
        "description": "env.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "class firestore_adminCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'create_database': ('parent', 'database', 'database_id', ),\n        'create_index': ('parent', 'index', ),\n        'delete_index': ('name', ),\n        'export_documents': ('name', 'collection_ids', 'output_uri_prefix', ),\n        'get_database': ('name', ),\n        'get_field': ('name', ),\n        'get_index': ('name', ),",
        "detail": "env.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "env.bin.fixup_firestore_admin_v1_keywords",
        "description": "env.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "env.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "env.bin.fixup_firestore_admin_v1_keywords",
        "description": "env.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestore_adminCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "env.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "firestoreCallTransformer",
        "kind": 6,
        "importPath": "env.bin.fixup_firestore_v1_keywords",
        "description": "env.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "class firestoreCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'batch_get_documents': ('database', 'documents', 'mask', 'transaction', 'new_transaction', 'read_time', ),\n        'batch_write': ('database', 'writes', 'labels', ),\n        'begin_transaction': ('database', 'options', ),\n        'commit': ('database', 'writes', 'transaction', ),\n        'create_document': ('parent', 'collection_id', 'document', 'document_id', 'mask', ),\n        'delete_document': ('name', 'current_document', ),\n        'get_document': ('name', 'mask', 'transaction', 'read_time', ),",
        "detail": "env.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "env.bin.fixup_firestore_v1_keywords",
        "description": "env.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "env.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "env.bin.fixup_firestore_v1_keywords",
        "description": "env.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestoreCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "env.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "Love",
        "kind": 6,
        "importPath": "love.models.love_model",
        "description": "love.models.love_model",
        "peekOfCode": "class Love(Base):\n    __tablename__ = \"Love\"\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, nullable=True)\n    product_id = Column(Integer, ForeignKey('Product.id'), nullable=True)\n    product = relationship(\"Product\", back_populates=\"loves\")\n    created_at = Column(\n        TIMESTAMP(timezone=True), nullable=False, server_default=text(\"now()\")\n    )\n    def __str__(self):",
        "detail": "love.models.love_model",
        "documentation": {}
    },
    {
        "label": "PAYMENT_METHOD",
        "kind": 6,
        "importPath": "order.models.order_model",
        "description": "order.models.order_model",
        "peekOfCode": "class PAYMENT_METHOD(PyEnum):\n    CASH = 'CASH'\nclass ORDER_STATUS(PyEnum):\n    PROCESSING = 'PROCESSING'\n    DELIVERING = 'DELIVERING'\n    WAIT_FOR_PAYMENT = 'WAIT_FOR_PAYMENT'\n    SUCCESS = 'SUCCESS'\n    CANCELED = 'CANCELED'\nclass Order(Base):\n    __tablename__ = \"Order\"",
        "detail": "order.models.order_model",
        "documentation": {}
    },
    {
        "label": "ORDER_STATUS",
        "kind": 6,
        "importPath": "order.models.order_model",
        "description": "order.models.order_model",
        "peekOfCode": "class ORDER_STATUS(PyEnum):\n    PROCESSING = 'PROCESSING'\n    DELIVERING = 'DELIVERING'\n    WAIT_FOR_PAYMENT = 'WAIT_FOR_PAYMENT'\n    SUCCESS = 'SUCCESS'\n    CANCELED = 'CANCELED'\nclass Order(Base):\n    __tablename__ = \"Order\"\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, nullable=True, index=True)",
        "detail": "order.models.order_model",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "order.models.order_model",
        "description": "order.models.order_model",
        "peekOfCode": "class Order(Base):\n    __tablename__ = \"Order\"\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, nullable=True, index=True)\n    product_id = Column(Integer, ForeignKey('Product.id'), nullable=True)\n    shop_id = Column(Integer, nullable=True)\n    amount = Column(Integer, default=1)\n    ship_fee = Column(Integer, default=20000)\n    total_price = Column(Integer, default=0)\n    payment_method = Column(Enum(PAYMENT_METHOD), default=PAYMENT_METHOD.CASH)",
        "detail": "order.models.order_model",
        "documentation": {}
    },
    {
        "label": "ProductMedia",
        "kind": 6,
        "importPath": "product.models.product_media_model",
        "description": "product.models.product_media_model",
        "peekOfCode": "class ProductMedia(Base):\n    __tablename__ = \"ProductMedia\"\n    id = Column(Integer, primary_key=True)\n    url = Column(String(512))\n    product_id = Column(Integer, ForeignKey('Product.id'), nullable=True)\n    sequence = Column(Integer, default=0)\n    product = relationship(\"Product\", back_populates=\"images\")\n    def __str__(self):\n        return self.url",
        "detail": "product.models.product_media_model",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "product.models.product_model",
        "description": "product.models.product_model",
        "peekOfCode": "class Product(Base):\n    __tablename__ = \"Product\"\n    id = Column(Integer, primary_key=True)\n    title = Column(String(128), nullable=False)\n    price = Column(Integer, default=0)\n    description = Column(String(1000), default=\"\")\n    amount = Column(Integer, default=1)\n    shop_id = Column(Integer, nullable=True)\n    tag_id = Column(Integer, ForeignKey('Tag.id'), nullable=True)\n    discount = Column(Integer, nullable=True)",
        "detail": "product.models.product_model",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "tag.models.tag_model",
        "description": "tag.models.tag_model",
        "peekOfCode": "class Tag(Base):\n    __tablename__ = \"Tag\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(50), nullable=False)\n    products = relationship(\"Product\", back_populates=\"tag\")\n    def __str__(self):\n        return self.name",
        "detail": "tag.models.tag_model",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Settings(BaseSettings):\n    POSTGRES_USER: str = os.getenv(\"POSTGRES_USER\", \"\")\n    POSTGRES_PASSWORD: str = os.getenv(\"POSTGRES_PASSWORD\", \"\")\n    POSTGRES_HOST: str = os.getenv(\"POSTGRES_HOST\", \"\")\n    POSTGRES_DATABASE: str = os.getenv(\"POSTGRES_DATABASE\", \"\")\n    JWT_SECRET_KEY: str = os.getenv(\"JWT_SECRET_KEY\", \"\")\n    JWT_REFRESH_SECRET_KEY: str = os.getenv(\"JWT_REFRESH_SECRET_KEY\", \"\")\n    JWT_ALGORITHM: str = os.getenv(\"JWT_ALGORITHM\", \"\")\n    MJ_APIKEY_PUBLIC: str = os.getenv(\"MJ_APIKEY_PUBLIC\", \"\")\n    MJ_APIKEY_PRIVATE: str = os.getenv(\"MJ_APIKEY_PRIVATE\", \"\")",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "settings = Settings()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        return db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = (\n    f\"postgresql://{settings.POSTGRES_USER}:{settings.POSTGRES_PASSWORD}@{settings.POSTGRES_HOST}/{settings.POSTGRES_DATABASE}\"\n)\nengine = create_engine(SQLALCHEMY_DATABASE_URL, echo=True)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        return db",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL, echo=True)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        return db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        return db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        return db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(title=\"ShopTaiChe Admin\")\nauthentication_backend = AdminAuth(\n    secret_key=settings.SECRET_KEY_ADMIN)\nadmin = AdminBackend(\n    app, engine, authentication_backend=authentication_backend)\nadmin.add_view(TagAdmin)\nadmin.add_view(ProductAdmin)\nadmin.add_view(ProductMediaAdmin)\nadmin.add_view(LoveAdmin)\nadmin.add_view(OrderAdmin)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "authentication_backend",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "authentication_backend = AdminAuth(\n    secret_key=settings.SECRET_KEY_ADMIN)\nadmin = AdminBackend(\n    app, engine, authentication_backend=authentication_backend)\nadmin.add_view(TagAdmin)\nadmin.add_view(ProductAdmin)\nadmin.add_view(ProductMediaAdmin)\nadmin.add_view(LoveAdmin)\nadmin.add_view(OrderAdmin)\napp.add_middleware(ExceptionMiddleware)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "admin = AdminBackend(\n    app, engine, authentication_backend=authentication_backend)\nadmin.add_view(TagAdmin)\nadmin.add_view(ProductAdmin)\nadmin.add_view(ProductMediaAdmin)\nadmin.add_view(LoveAdmin)\nadmin.add_view(OrderAdmin)\napp.add_middleware(ExceptionMiddleware)\ncred = credentials.Certificate(\"firebaseConfig.json\")\nfirebase_admin.initialize_app(",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "cred",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "cred = credentials.Certificate(\"firebaseConfig.json\")\nfirebase_admin.initialize_app(\n    cred,\n    {\n        \"storageBucket\": \"shop-tai-che.appspot.com\",\n    },\n)\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}",
        "detail": "main",
        "documentation": {}
    }
]