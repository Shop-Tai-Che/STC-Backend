generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://default:root@54.251.11.200:5432/shoptaiche"
}

model Love {
  id         Int      @id @default(autoincrement())
  product_id Int?
  created_at DateTime @default(now())
  user_id    Int?
  Product    Product? @relation(fields: [product_id], references: [id], onDelete: Cascade)
  User       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([product_id], type: Hash)
}

model Order {
  id             Int            @id @default(autoincrement())
  product_id     Int
  shop_id        String?
  amount         Int            @default(1)
  ship_fee       Int            @default(20000)
  payment_method PAYMENT_METHOD @default(CASH)
  address        String         @db.VarChar(256)
  note           String?        @db.VarChar(256)
  status         ORDER_STATUS   @default(PROCESSING)
  created_at     DateTime       @default(now())
  total_price    Int            @default(0)
  user_id        Int
  name           String?        @db.VarChar(50)
  phone          String?        @db.VarChar(15)
  Product        Product        @relation(fields: [product_id], references: [id])
  User           User           @relation(fields: [user_id], references: [id])

  @@index([user_id], type: Hash)
}

model Product {
  id                    Int            @id @default(autoincrement())
  title                 String         @db.VarChar(128)
  price                 Int            @default(0)
  description           String         @default("") @db.VarChar(10000)
  amount                Int            @default(1)
  tag_id                Int?
  discount              Int?
  discount_start        DateTime?
  discount_end          DateTime?
  created_at            DateTime       @default(now())
  updated_at            DateTime?
  manufactoring_process String         @default("") @db.VarChar(10000)
  has_sold              Int            @default(0)
  is_verified           Boolean        @default(false)
  ship_fee              Int            @default(20000)
  views                 Int            @default(0)
  violation             String?
  shop_id               Int?
  Love                  Love[]
  Order                 Order[]
  User                  User?          @relation(fields: [shop_id], references: [id])
  Tag                   Tag?           @relation(fields: [tag_id], references: [id])
  ProductMedia          ProductMedia[]
  Review                Review[]

  @@index([title], type: Hash)
}

model ProductMedia {
  id         Int      @id @default(autoincrement())
  url        String   @db.VarChar(512)
  product_id Int?
  sequence   Int?     @default(0)
  Product    Product? @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id], type: Hash)
}

model Reply {
  id         Int      @id @default(autoincrement())
  review_id  Int
  comment    String?  @db.VarChar(1024)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user_id    Int
  Review     Review   @relation(fields: [review_id], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([review_id], type: Hash)
}

model Review {
  id          Int           @id @default(autoincrement())
  product_id  Int
  rating      Int           @default(5)
  comment     String?       @db.VarChar(1024)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())
  user_id     Int
  Reply       Reply[]
  Product     Product       @relation(fields: [product_id], references: [id], onDelete: Cascade)
  User        User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ReviewMedia ReviewMedia[]

  @@index([product_id], type: Hash)
}

model ReviewMedia {
  id        Int     @id @default(autoincrement())
  url       String  @db.VarChar(512)
  review_id Int?
  Review    Review? @relation(fields: [review_id], references: [id], onDelete: Cascade)

  @@index([review_id], type: Hash)
}

model Tag {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]
}

model User {
  id         Int        @id @default(autoincrement())
  phone      String?    @db.VarChar(15)
  name       String?    @db.VarChar(100)
  zalo_id    String?    @unique @db.VarChar(255)
  avatar     String?    @db.VarChar(1024)
  active     Boolean    @default(true)
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  Love       Love[]
  Order      Order[]
  Product    Product[]
  Reply      Reply[]
  Review     Review[]
  ShopInfo   ShopInfo[]
}

model ShopInfo {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(100)
  avatar   String? @db.VarChar(1024)
  active   Boolean @default(true)
  address  String? @db.VarChar(1024)
  phone    String? @db.VarChar(15)
  tax_code String? @db.VarChar(50)
  user_id  Int
  User     User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum ORDER_STATUS {
  PROCESSING
  DELIVERING
  WAIT_FOR_PAYMENT
  SUCCESS
  CANCELED
  CONFIRM_ORDER
}

enum PAYMENT_METHOD {
  CASH
}

enum order_status {
  PROCESSING
  DELIVERING
  WAIT_FOR_PAYMENT
  SUCCESS
  CANCELED
  CONFIRM_ORDER
}

enum payment_method {
  CASH
}
